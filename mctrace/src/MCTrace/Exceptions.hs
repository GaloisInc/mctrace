module MCTrace.Exceptions (
    TraceException(..)
  , ppTraceException
  ) where

import qualified Control.Exception as X
import qualified Data.Binary.Get as DBG
import qualified Data.ElfEdit as DE
import           Data.Word ( Word32 )
import qualified Prettyprinter as PP

import qualified Language.DTrace as LD

data TraceException = DTraceParseFailure FilePath X.SomeException
                    | DTraceTypeCheckFailure FilePath [LD.TypeError]
                    | ELFDecodeError DBG.ByteOffset String
                    | UnsupportedArchitecture DE.ElfMachine
                    | ErrorLoadingGeneratedProbes String
                    | ELFParseError [DE.ElfParseError]
                    | MissingGeneratedProbeSection String
                    | MissingSupportFunction String
                    | MultipleGeneratedProbeSections String
                    | MissingProbeSymbol String
                    | ErrorReadingMappingFile FilePath String
                    | ErrorReadingPersistenceFile FilePath Word32 String
  deriving (Show)

instance X.Exception TraceException

instance PP.Pretty TraceException where
  pretty = ppTraceException

ppTraceException :: TraceException -> PP.Doc a
ppTraceException te =
  case te of
    DTraceParseFailure fp x ->
      PP.hsep [ PP.pretty "Error parsing"
              , PP.pretty fp
              , PP.pretty "as a DTrace script:"
              , PP.viaShow x
              ]
    DTraceTypeCheckFailure fp errs ->
      PP.hsep [ PP.pretty "Error type checking"
              , PP.pretty fp
              , PP.pretty "as a DTrace script:"
              ] <> PP.hardline <>
      PP.indent 2 (PP.vsep (map (\e -> PP.pretty "* " <> PP.pretty e) errs))
    ELFDecodeError off msg ->
      PP.hsep [ PP.pretty "Error parsing ELF file at offset"
              , PP.viaShow off
              , PP.pretty ": "
              , PP.pretty msg
              ]
    UnsupportedArchitecture arch ->
      PP.hsep [ PP.pretty "Unsupported architecture"
              , PP.viaShow arch
              ]
    ErrorLoadingGeneratedProbes msg ->
      PP.hsep [ PP.pretty "Error loading the ELF file generated from the probe specification"
              , PP.pretty msg
              ]
    ELFParseError errs ->
      PP.pretty "Errors while parsing probe machine code generated by LLVM:" <> PP.hardline <>
        PP.indent 2 (PP.vsep (map (\e -> PP.pretty "* " <> PP.viaShow e) errs))
    MissingGeneratedProbeSection name ->
      PP.pretty "Missing section " <> PP.pretty name <> PP.pretty " in the object file generated from the probe definitions"
    MultipleGeneratedProbeSections name ->
      PP.pretty "Multiple sections named " <> PP.pretty name <> PP.pretty " in the object file generated from the probe definitions"
    MissingProbeSymbol name ->
      PP.hsep [ PP.pretty "Symbol"
              , PP.dquotes (PP.pretty name)
              , PP.pretty "does not exist in the generated machine code for the user-specified probes"
              ]
    ErrorReadingMappingFile path msg ->
      PP.hsep [ PP.pretty "Error reading mapping file"
              , PP.dquotes (PP.pretty path) <> PP.pretty ":"
              , PP.pretty msg
              ]
    ErrorReadingPersistenceFile path off msg ->
      PP.hsep [ PP.pretty "Error reading persistence file"
              , PP.dquotes (PP.pretty path)
              , PP.pretty "at offset"
              , PP.pretty off <> PP.pretty ":"
              , PP.pretty msg
              ]
